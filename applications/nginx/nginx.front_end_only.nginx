# Amazing documentation : https://gist.github.com/denji/8359866

user  nginx;

# Set number of worker processes based off machine's CPU cores.
worker_processes auto;

# Set number of file descriptors that can be used by NGINX.
worker_rlimit_nofile 1048575;

#error_log /var/log/nginx/error.log warn;
#pid       /var/run/nginx.pid;

events {
    # Max clients = 1024 * worker_processes
    worker_connections 1024;

    # Optimized for serving many clients for each thread, esspecially for Linux.
    use epoll;

    # Accept as many connections as possible, can flood worker connections if set too low.
    multi_accept on;
}

http {

    # -----------------------------------------------
    include           /etc/nginx/mime.types;
    default_type      application/octet-stream;
    # -----------------------------------------------
    # Don't buffer data sent, good for small data bursts in real time.
    tcp_nodelay       on;
    # Send headers in one piece (better than sending one by one).
    tcp_nopush        on;
    # Copies data between on FD to another within kernel, faster than read() + write().
    sendfile          on;
    # -----------------------------------------------
    gzip              off;
    gzip_static       on;
    # -----------------------------------------------
    client_body_buffer_size     10K;
    client_header_buffer_size   1k;
    client_max_body_size        8m;
    large_client_header_buffers 4 4k;
    # -----------------------------------------------
    client_body_timeout   12;
    client_header_timeout 12;
    keepalive_timeout     15;
    send_timeout          10;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    # -----------------------------------------------
    proxy_cache_path /nginx_cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
    proxy_cache_methods GET HEAD;
    # -----------------------------------------------

    #
    # Cache information about FDs, frequently accessed files can boost performance (values need to be fine tuned).
    open_file_cache max=200000 inactive=90s;
    open_file_cache_valid 180s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    #

    server {
        #listen 80 default_server;
        listen 80 reuseport;
        server_name quasarsource.com www.quasarsource.com;
        root /;

        #rewrite ^(.*)/$ $1/nl.min.html.gz;

        #if ($http_x_forwarded_proto != 'https') {
        #    rewrite ^(.*) https://$host$1 redirect;
        #}

        location ^~ /v/nl.min.js {
            expires -1;
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        }

        location /v/ {
            # https://www.nginx.com/blog/nginx-caching-guide/
            proxy_cache my_cache;
            #proxy_pass http://my_upstream;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404      1m;
            #add_header X-Cache-Status $upstream_cache_status;

            proxy_ignore_headers Set-Cookie;
            proxy_hide_header Set-Cookie;

            expires 90d;
            #add_header Pragma public;
            add_header Cache-Control "public";

            sendfile_max_chunk 1m;
        }

        location / {
            proxy_cache my_cache;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            #proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;

            index nl.min.html;
            root /v/;
        }

    }

    log_format cache_status '[$time_local] "$request"  $upstream_cache_status';
    #access_log logs/cache.log cache_status;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log  /v/nginx.log  main;

    #error_log logs/error.log warn;
    #include /etc/nginx/conf.d/*.conf;

}